#!/usr/bin/env rc

fn echoerr { echo $* >[1=2] }

fn checkdep {
	which $1 > /dev/null >[2=1] || {
		echoerr The $1 command is not found and required.
		echoerr Try installing it with:
		echoerr '    ' go get -u $2
		echoerr '    ' go install $2^/cmd/^$1
		exit 1
	}
}

fn processArgs {
	storageDir = $1
	~ $storageDir () &&
		echoerr 'a directory to output files to must be provided as an argument to this command' &&
		exit 1

	configFilepath = $2
	~ $configFilepath () &&
		echoerr 'the location of a config file for dlsleeplog must be specified' &&
		exit 1	

	today = `{ now -date }
	~ $today () &&
		echoerr 'could not determine today''s date' &&
		exit 1

	oneWeekAgo = `{ now -date -minus -days 7 }
	~ $oneWeekAgo () &&
		echoerr 'could not determine date of two days ago' &&
		exit 1

	nameTemplate = sleep_log_payload
}

fn downloadSleepLogs {
	dlsleeplog \
		-as sleep_log_payload \
		-into $storageDir \
		-from $oneWeekAgo \
		-to $today \
		-config $configFilepath ||
			{ echoerr 'could not download sleep logs' && exit 1 }
}

fn _git {
	git -C $storageDir $*
}

fn stageChanges {
	dateRange = `{ dates -from $oneWeekAgo -to $today }
	for (d in $dateRange) {
		filename = `{ printf %s_%s.json $nameTemplate $d }
		test -e $storageDir/$filename && _git add $filename
	}
	datesAffected = `{ printStagedDates AM }
	~ $datesAffected () && exit 0 # Nothing to do, so exit.
	return 0
}

fn printStagedDates {
	filter = AM
	switch ($1) {
	case M m; filter = M
	case A a; filter = A
	case AM MA ma am; filter = AM
	}
	echo `{ _git diff --cached --name-only --diff-filter=$filter |
		sed -e s/$nameTemplate^_//  -e s/.json// }
}

fn commitChanges {
	first = $datesAffected(1)
	last = $datesAffected($#datesAffected)
	commitSubject = 'Update file'

	~ $#datesAffected 1 &&
		commitSubject = `{ printf '%s for %s' $commitSubject $first } ||
		commitSubject = `{ printf '%ss for %s through %s' $commitSubject $first $last }

	newline = '
'
	datesAdded = $newline ^ `{ printStagedDates A }
	datesModified = `{ printStagedDates M }
	~ $datesModifed () && datesModified = $newline ^ None
	tmpFile = `{ printf '%s/tmp/%s.%s' $HOME $0 $pid }

	cat > $tmpFile << eof
$commitSubject

Dates added:
$datesAdded


Dates modified:
$datesModified
eof

	~ $datesAffected () || _git commit -F $tmpFile

	rm $tmpFile
}

fn main {
	processArgs $* &&
	downloadSleepLogs &&
	stageChanges &&
	commitChanges
}

checkdep now github.com/aoeu/gosh
checkdep dates github.com/aoeu/gosh
checkdep dlsleeplog github.com/aoeu/bitfit

test ! -d $HOME/tmp &&
	echo make a directory at $HOME/tmp to use for temp files, then re-run $0 $* &&
	exit 0

main $*
